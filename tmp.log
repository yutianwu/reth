/Users/wuzhenxing/.cargo/bin/cargo test --color=always --lib trie::tests::db_iter --no-fail-fast --manifest-path /Users/wuzhenxing/Documents/development/rust/reth/crates/trie/Cargo.toml -- --format=json --exact -Z unstable-options --show-output
Testing started at 14:25 ...
   Compiling proc-macro2 v1.0.81
   Compiling thiserror v1.0.59
   Compiling quote v1.0.36
   Compiling syn v2.0.60
   Compiling syn v1.0.109
   Compiling proc-macro-error-attr v1.0.4
   Compiling syn-solidity v0.7.0
   Compiling darling_core v0.20.8
   Compiling bindgen v0.69.4
   Compiling proc-macro-error v1.0.4
   Compiling darling_core v0.10.2
   Compiling serde_derive v1.0.198
   Compiling derive_arbitrary v1.3.2
   Compiling zeroize_derive v1.4.2
   Compiling alloy-rlp-derive v0.3.4
   Compiling tracing-attributes v0.1.27
   Compiling derive_more v0.99.17
   Compiling zeroize v1.7.0
   Compiling proptest-derive v0.4.0
   Compiling arbitrary v1.3.2
   Compiling generic-array v0.14.7
   Compiling thiserror-impl v1.0.59
   Compiling tracing v0.1.40
   Compiling crypto-common v0.1.6
   Compiling block-buffer v0.10.4
   Compiling der v0.7.9
   Compiling futures-macro v0.3.30
   Compiling digest v0.10.7
   Compiling tokio-macros v2.2.0
   Compiling crypto-bigint v0.5.5
   Compiling sha2 v0.10.8
   Compiling signature v2.2.0
   Compiling hmac v0.12.1
   Compiling futures-util v0.3.30
   Compiling alloy-sol-macro-input v0.7.0
   Compiling rfc6979 v0.4.0
   Compiling darling_macro v0.20.8
   Compiling spki v0.7.3
   Compiling sec1 v0.7.3
   Compiling blst v0.3.11
   Compiling alloy-sol-macro v0.7.0
   Compiling serde v1.0.198
   Compiling pkcs8 v0.10.2
   Compiling curve25519-dalek-derive v0.1.1
   Compiling darling v0.20.8
   Compiling ed25519 v2.2.3
   Compiling auto_impl v1.2.0
   Compiling enumn v0.1.13
   Compiling elliptic-curve v0.13.8
   Compiling curve25519-dalek v4.1.2
   Compiling serde_with_macros v3.7.0
   Compiling ecdsa v0.16.9
   Compiling sha3 v0.10.8
   Compiling strum_macros v0.26.2
   Compiling num_enum_derive v0.7.2
   Compiling k256 v0.13.3
   Compiling ripemd v0.1.3
   Compiling modular-bitfield-impl v0.11.2
   Compiling ed25519-dalek v2.1.1
   Compiling num_enum v0.7.2
   Compiling reth-codecs-derive v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/storage/codecs/derive)
   Compiling darling_macro v0.10.2
   Compiling pin-project-internal v1.1.5
   Compiling cipher v0.3.0
   Compiling async-trait v0.1.80
   Compiling block-padding v0.3.3
   Compiling universal-hash v0.4.0
   Compiling darling v0.10.2
   Compiling futures-executor v0.3.30
   Compiling enum-as-inner v0.3.4
   Compiling futures v0.3.30
   Compiling strum v0.26.2
   Compiling inout v0.1.3
   Compiling polyval v0.5.3
   Compiling modular-bitfield v0.11.2
   Compiling derive_builder_core v0.9.0
   Compiling ctr v0.8.0
   Compiling cipher v0.4.4
   Compiling bytes v1.6.0
   Compiling smallvec v1.13.2
   Compiling bitflags v2.5.0
   Compiling const-hex v1.11.3
   Compiling serde_json v1.0.116
   Compiling hashbrown v0.14.3
   Compiling beef v0.5.2
   Compiling bitvec v1.0.1
   Compiling rustix v0.38.32
   Compiling parking_lot_core v0.9.9
   Compiling c-kzg v1.0.0
   Compiling alloy-rlp v0.3.4
   Compiling rlp v0.5.2
   Compiling secp256k1 v0.27.0
   Compiling parking_lot v0.12.1
   Compiling http v0.2.12
   Compiling serde_with v3.7.0
   Compiling tokio v1.37.0
   Compiling enr v0.10.0
   Compiling indexmap v2.2.6
   Compiling pin-project v1.1.5
   Compiling jsonrpsee-types v0.22.4
   Compiling tempfile v3.10.1
   Compiling http-body v0.4.6
   Compiling nibble_vec v0.1.0
   Compiling derive_builder v0.9.0
   Compiling rusty-fork v0.3.0
   Compiling radix_trie v0.2.1
   Compiling attohttpc v0.24.1
   Compiling tracing-futures v0.2.5
   Compiling parking_lot_core v0.8.6
   Compiling aes v0.7.5
   Compiling proptest v1.4.0
   Compiling ghash v0.4.4
   Compiling ctr v0.7.0
   Compiling aead v0.4.3
   Compiling parking_lot v0.11.2
   Compiling lru v0.12.3
   Compiling hashlink v0.8.4
   Compiling aes-gcm v0.9.2
   Compiling hkdf v0.12.4
   Compiling enum-ordinalize v3.1.15
   Compiling metrics-macros v0.7.1
   Compiling ctr v0.9.2
   Compiling aes v0.8.4
   Compiling tracing-serde v0.1.3
   Compiling concat-kdf v0.1.0
   Compiling reth-metrics-derive v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/metrics/metrics-derive)
   Compiling tracing-subscriber v0.3.18
   Compiling reth-mdbx-sys v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/storage/libmdbx-rs/mdbx-sys)
   Compiling educe v0.4.23
   Compiling clap_derive v4.5.4
   Compiling serde_bytes v0.11.14
   Compiling metrics v0.21.1
   Compiling cuckoofilter v0.5.0
   Compiling dashmap v5.5.3
   Compiling bincode v1.3.3
   Compiling impl-trait-for-tuples v0.2.2
   Compiling test-log-macros v0.2.15
   Compiling reth-metrics v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/metrics)
   Compiling tinytemplate v1.2.1
   Compiling test-log v0.2.15
   Compiling tracing-journald v0.3.0
   Compiling tracing-appender v0.2.3
   Compiling tracing-logfmt v0.3.4
   Compiling ciborium v0.2.2
   Compiling clap v4.5.4
   Compiling ruint v1.12.1
   Compiling nybbles v0.2.1
   Compiling tokio-util v0.7.10
   Compiling alloy-chains v0.1.16
   Compiling trust-dns-proto v0.20.4
   Compiling reth-tracing v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/tracing)
   Compiling alloy-primitives v0.7.0
   Compiling criterion v0.5.1
   Compiling h2 v0.3.26
   Compiling tokio-stream v0.1.15
   Compiling delay_map v0.3.0
   Compiling discv5 v0.4.1 (https://github.com/sigp/discv5?rev=04ac004#04ac0042)
   Compiling parity-scale-codec v3.6.9
   Compiling reth-libmdbx v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/storage/libmdbx-rs)
   Compiling alloy-serde v0.1.0 (https://github.com/alloy-rs/alloy?rev=39b8695#39b86958)
   Compiling alloy-sol-types v0.7.0
   Compiling alloy-eips v0.1.0 (https://github.com/alloy-rs/alloy?rev=39b8695#39b86958)
   Compiling alloy-genesis v0.1.0 (https://github.com/alloy-rs/alloy?rev=39b8695#39b86958)
   Compiling revm-primitives v3.1.1
   Compiling alloy-consensus v0.1.0 (https://github.com/alloy-rs/alloy?rev=39b8695#39b86958)
   Compiling alloy-rpc-types-anvil v0.1.0 (https://github.com/alloy-rs/alloy?rev=39b8695#39b86958)
   Compiling reth-codecs v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/storage/codecs)
   Compiling alloy-trie v0.3.1
   Compiling reth-ethereum-forks v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/ethereum-forks)
   Compiling alloy-rpc-types v0.1.0 (https://github.com/alloy-rs/alloy?rev=39b8695#39b86958)
   Compiling revm-precompile v6.0.0
   Compiling revm-interpreter v4.0.0
   Compiling hyper v0.14.28
   Compiling trust-dns-client v0.20.4
   Compiling triehash v0.8.4
   Compiling revm v8.0.0
   Compiling alloy-rpc-types-engine v0.1.0 (https://github.com/alloy-rs/alloy?rev=39b8695#39b86958)
   Compiling alloy-rpc-types-trace v0.1.0 (https://github.com/alloy-rs/alloy?rev=39b8695#39b86958)
   Compiling hyper-system-resolver v0.5.0
   Compiling igd-next v0.14.3
   Compiling public-ip v0.2.2
   Compiling reth-rpc-types v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/rpc/rpc-types)
   Compiling reth-net-nat v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/net/nat)
   Compiling reth-primitives v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/primitives)
   Compiling reth-net-common v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/net/common)
   Compiling reth-eth-wire-types v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/net/eth-wire-types)
   Compiling reth-consensus v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/consensus/consensus)
   Compiling reth-nippy-jar v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/storage/nippy-jar)
   Compiling reth-ecies v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/net/ecies)
   Compiling reth-discv4 v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/net/discv4)
   Compiling reth-eth-wire v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/net/eth-wire)
   Compiling reth-network-api v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/net/network-api)
   Compiling reth-interfaces v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/interfaces)
   Compiling reth-db v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/storage/db)
   Compiling reth-evm v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/evm)
   Compiling reth-trie v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/trie)
   Compiling reth-provider v0.2.0-beta.6 (/Users/wuzhenxing/Documents/development/rust/reth/crates/storage/provider)
warning: unused import: `crate::trie::HashedStorageCursor`
   --> crates/trie/src/trie.rs:578:9
    |
578 |     use crate::trie::HashedStorageCursor;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: `reth-trie` (lib test) generated 1 warning
    Finished test [unoptimized + debuginfo] target(s) in 1m 20s
     Running unittests src/lib.rs (target/debug/deps/reth_trie-11557336c5936ff6)
account trie
Key: StoredNibbles(Nibbles("06")), Value: StoredBranchNode(BranchNodeCompact { state_mask: TrieMask(0000000000100001), tree_mask: TrieMask(0000000000000000), hash_mask: TrieMask(0000000000000001), hashes: [0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd], root_hash: None })
hashed accounts
Key: 0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a, Value: Account { nonce: 0, balance: 0x000000000000000000000000000000000000000000000000000031d66444e8c0_U256, bytecode_hash: None }
Key: 0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x6079234475ac4992943f96a73c5e885e89ecaf8a07e9d34aa76ac8301352a2fd, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x60d3ba28cbf820d0bf748767d9fdcaef4380841dcbbca1048f9d2a149800d42e, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678, Value: Account { nonce: 0, balance: 0x0000000000000000000000000000000000000000000000001bc16d674ec80000_U256, bytecode_hash: None }
Key: 0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108, Value: Account { nonce: 2, balance: 0x00000000000000000000000000000000000000000000d3c2000d1bb28f9e49d0_U256, bytecode_hash: None }
Key: 0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
main loop, enter loop, None, Some(Nibbles("")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles(""), nibble: -1, state_flag: true, tree_flag: true, hash_flag: false, hash: None }]
main loop, walker key: Nibbles("")
main loop, walker key: Nibbles(""), previous: None
update_full_key: key: Nibbles("00"), old: -1, new: 0
push subnode, [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, seek key: 0x0000000000000000000000000000000000000000000000000000000000000000, current: Some((0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None })), walker: Some(Nibbles("0600"))
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, before continue, Some(Nibbles("0600")), 0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0
main loop, hashed address: 0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0, current: Some((0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0
add leaf, self.key: Nibbles(""), Key: Nibbles("00000301040e0506050e000507040c0b0401020506030d0f0603040600080d07060f050c05090d090f0801070e08050906060100000e0c010d04080000050c00"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, before continue, Some(Nibbles("0600")), 0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6
main loop, hashed address: 0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6, current: Some((0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6
stack [[160, 100, 70, 158, 143, 181, 46, 79, 216, 26, 45, 176, 198, 152, 114, 228, 16, 141, 64, 180, 137, 19, 122, 202, 220, 105, 12, 208, 241, 113, 19, 221, 227]]
add leaf, self.key: Nibbles("00000301040e0506050e000507040c0b0401020506030d0f0603040600080d07060f050c05090d090f0801070e08050906060100000e0c010d04080000050c00"), Key: Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, before continue, Some(Nibbles("0600")), 0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3
main loop, hashed address: 0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3, current: Some((0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3
stack [[160, 100, 70, 158, 143, 181, 46, 79, 216, 26, 45, 176, 198, 152, 114, 228, 16, 141, 64, 180, 137, 19, 122, 202, 220, 105, 12, 208, 241, 113, 19, 221, 227], [160, 41, 201, 95, 3, 208, 118, 34, 167, 24, 1, 196, 73, 145, 170, 2, 114, 49, 150, 59, 107, 41, 246, 170, 172, 106, 91, 89, 36, 80, 151, 30, 170]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000000000000), TrieMask(0000010000000001)]
update parent hash, parent_index:0,  hash_masks:TrieMask(0000000000000001)
store branch node, current: Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000010000000001), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000000000000001), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
add leaf, self.key: Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06"), Key: Nibbles("010c00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, before continue, Some(Nibbles("0600")), 0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae
main loop, hashed address: 0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae, current: Some((0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 135, 61, 53, 164, 127, 68, 114, 171, 170, 212, 106, 221, 148, 156, 67, 130, 141, 214, 189, 169, 44, 210, 163, 222, 237, 255, 201, 83, 252, 52, 147, 55]]
add leaf, self.key: Nibbles("010c00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03"), Key: Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, before continue, Some(Nibbles("0600")), 0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60
main loop, hashed address: 0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60, current: Some((0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a, Account { nonce: 0, balance: 0x000000000000000000000000000000000000000000000000000031d66444e8c0_U256, bytecode_hash: None }))
main loop, leaf node: 0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 135, 61, 53, 164, 127, 68, 114, 171, 170, 212, 106, 221, 148, 156, 67, 130, 141, 214, 189, 169, 44, 210, 163, 222, 237, 255, 201, 83, 252, 52, 147, 55], [160, 138, 164, 77, 51, 120, 7, 34, 53, 124, 106, 62, 33, 178, 96, 16, 176, 131, 176, 100, 132, 101, 244, 191, 37, 166, 177, 238, 185, 231, 235, 18, 78]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000000000001), TrieMask(0101000000000000)]
update parent hash, parent_index:0,  hash_masks:TrieMask(0000000000000011)
store branch node, current: Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0101000000000000), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000000000000011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
add leaf, self.key: Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e"), Key: Nibbles("05010409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, before continue, Some(Nibbles("0600")), 0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a
main loop, hashed address: 0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a, current: Some((0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 33, 189, 79, 32, 213, 160, 164, 89, 68, 234, 212, 200, 175, 190, 62, 61, 231, 46, 25, 90, 210, 113, 241, 63, 165, 53, 38, 8, 161, 155, 199, 22]]
add leaf, self.key: Nibbles("05010409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600"), Key: Nibbles("050308000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a"), Value: [248, 74, 128, 134, 49, 214, 100, 68, 232, 192, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, before continue, Some(Nibbles("0600")), 0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e
main loop, hashed address: 0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e, current: Some((0x6079234475ac4992943f96a73c5e885e89ecaf8a07e9d34aa76ac8301352a2fd, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 33, 189, 79, 32, 213, 160, 164, 89, 68, 234, 212, 200, 175, 190, 62, 61, 231, 46, 25, 90, 210, 113, 241, 63, 165, 53, 38, 8, 161, 155, 199, 22], [160, 217, 214, 175, 73, 188, 130, 235, 232, 182, 4, 205, 254, 212, 187, 184, 200, 157, 250, 164, 173, 166, 0, 163, 60, 246, 61, 216, 222, 186, 214, 238, 44]]
add leaf, self.key: Nibbles("050308000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a"), Key: Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, before continue, Some(Nibbles("0600")), 0x6079234475ac4992943f96a73c5e885e89ecaf8a07e9d34aa76ac8301352a2fd
main loop, continue: Some(Nibbles("0600")), 0x6079234475ac4992943f96a73c5e885e89ecaf8a07e9d34aa76ac8301352a2fd
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, walker key: Nibbles("0600"), previous: None
main loop, branch node: Nibbles("0600"), false, 0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd
add branch, self.key: Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e"), Key: Nibbles("0600"), Value: 0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 33, 189, 79, 32, 213, 160, 164, 89, 68, 234, 212, 200, 175, 190, 62, 61, 231, 46, 25, 90, 210, 113, 241, 63, 165, 53, 38, 8, 161, 155, 199, 22], [160, 217, 214, 175, 73, 188, 130, 235, 232, 182, 4, 205, 254, 212, 187, 184, 200, 157, 250, 164, 173, 166, 0, 163, 60, 246, 61, 216, 222, 186, 214, 238, 44], [160, 162, 162, 130, 6, 231, 125, 40, 15, 174, 105, 88, 117, 98, 152, 36, 247, 90, 204, 76, 203, 167, 254, 160, 156, 240, 14, 100, 53, 218, 154, 125, 224]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000000000011), TrieMask(0000010000001010)]
update parent hash, parent_index:0,  hash_masks:TrieMask(0000000000100011)
store branch node, current: Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000010000001010), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000000000100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
main loop, enter loop, None, Some(Nibbles("0600")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0600"), nibble: 0, state_flag: true, tree_flag: false, hash_flag: true, hash: Some(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd) }]
main loop, walker key: Nibbles("0600")
main loop, seek key: 0x6100000000000000000000000000000000000000000000000000000000000000, current: Some((0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None })), walker: Some(Nibbles("0605"))
main loop, enter loop, None, Some(Nibbles("0605")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0605"), nibble: 5, state_flag: true, tree_flag: false, hash_flag: false, hash: None }]
main loop, walker key: Nibbles("0605")
main loop, before continue, Some(Nibbles("0605")), 0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2
main loop, continue: Some(Nibbles("0605")), 0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2
main loop, enter loop, None, Some(Nibbles("0605")), [CursorSubNode { key: Nibbles(""), full_key: Nibbles("06"), nibble: 6, state_flag: true, tree_flag: true, hash_flag: false, hash: None }, CursorSubNode { key: Nibbles("06"), full_key: Nibbles("0605"), nibble: 5, state_flag: true, tree_flag: false, hash_flag: false, hash: None }]
main loop, walker key: Nibbles("0605")
main loop, walker key: Nibbles("0605"), previous: None
main loop, seek key: 0x6500000000000000000000000000000000000000000000000000000000000000, current: Some((0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None })), walker: None
main loop, enter loop, None, None, []
main loop, before continue, None, 0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2
main loop, hashed address: 0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2, current: Some((0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2
add leaf, self.key: Nibbles("0600"), Key: Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7
main loop, hashed address: 0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7, current: Some((0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 159, 142, 63, 64, 226, 88, 92, 162, 1, 179, 162, 153, 113, 158, 154, 129, 130, 75, 43, 76, 118, 85, 216, 218, 167, 92, 74, 238, 91, 115, 191, 221], [160, 107, 17, 101, 128, 224, 242, 3, 220, 189, 159, 107, 254, 186, 31, 108, 175, 189, 235, 226, 67, 195, 64, 233, 243, 184, 18, 57, 25, 138, 116, 179, 17]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000000100011), TrieMask(0000000000100001)]
update parent hash, parent_index:0,  hash_masks:TrieMask(0000000001100011)
store branch node, current: Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000001), groups:TrieMask(0000000000100001), children: [0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd], len: 1, store_in_db_trie: true
store branch node, tree_masks: [TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000000001100011), TrieMask(0000000000000001), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
tree masks, self.tree_masks=[TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], current=Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02"), len=1
tree masks, 1, 64, [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
add leaf, self.key: Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02"), Key: Nibbles("07050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94
main loop, hashed address: 0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94, current: Some((0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205]]
add leaf, self.key: Nibbles("07050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07"), Key: Nibbles("080a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0
main loop, hashed address: 0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0, current: Some((0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48]]
add leaf, self.key: Nibbles("080a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904"), Key: Nibbles("09030203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f
main loop, hashed address: 0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f, current: Some((0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678, Account { nonce: 0, balance: 0x0000000000000000000000000000000000000000000000001bc16d674ec80000_U256, bytecode_hash: None }))
main loop, leaf node: 0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 4, 15, 90, 154, 70, 34, 67, 194, 68, 159, 230, 107, 50, 237, 208, 232, 46, 134, 5, 254, 127, 78, 245, 200, 111, 55, 96, 209, 169, 44, 25, 3]]
add leaf, self.key: Nibbles("09030203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00"), Key: Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678
main loop, hashed address: 0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678, current: Some((0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 4, 15, 90, 154, 70, 34, 67, 194, 68, 159, 230, 107, 50, 237, 208, 232, 46, 134, 5, 254, 127, 78, 245, 200, 111, 55, 96, 209, 169, 44, 25, 3], [160, 54, 81, 140, 195, 111, 223, 233, 185, 68, 171, 42, 191, 12, 35, 22, 165, 180, 205, 205, 208, 185, 75, 11, 16, 136, 114, 90, 88, 93, 19, 139, 87]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000111100011), TrieMask(0000000010001000)]
update parent hash, parent_index:0,  hash_masks:TrieMask(0000001001100011)
store branch node, current: Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000000010001000), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000001001100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
add leaf, self.key: Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f"), Key: Nibbles("0a090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708"), Value: [248, 76, 128, 136, 27, 193, 109, 103, 78, 200, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33
main loop, hashed address: 0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33, current: Some((0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108, Account { nonce: 2, balance: 0x00000000000000000000000000000000000000000000d3c2000d1bb28f9e49d0_U256, bytecode_hash: None }))
main loop, leaf node: 0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153]]
add leaf, self.key: Nibbles("0a090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708"), Key: Nibbles("0b0409070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108
main loop, hashed address: 0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108, current: Some((0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 127, 10, 252, 236, 18, 120, 102, 252, 231, 25, 121, 28, 231, 234, 97, 52, 101, 157, 4, 33, 135, 184, 217, 50, 141, 45, 126, 105, 15, 79, 39, 105]]
add leaf, self.key: Nibbles("0b0409070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303"), Key: Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008"), Value: [248, 78, 2, 138, 211, 194, 0, 13, 27, 178, 143, 158, 73, 208, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7
main loop, hashed address: 0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7, current: Some((0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 127, 10, 252, 236, 18, 120, 102, 252, 231, 25, 121, 28, 231, 234, 97, 52, 101, 157, 4, 33, 135, 184, 217, 50, 141, 45, 126, 105, 15, 79, 39, 105], [160, 191, 138, 96, 18, 245, 172, 87, 83, 161, 52, 221, 249, 255, 248, 54, 26, 223, 21, 222, 104, 23, 50, 255, 200, 66, 32, 152, 220, 213, 147, 168, 87]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000011111100011), TrieMask(0000000001010000)]
update parent hash, parent_index:0,  hash_masks:TrieMask(0000101001100011)
store branch node, current: Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000000001010000), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000101001100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
add leaf, self.key: Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008"), Key: Nibbles("0c03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685
main loop, hashed address: 0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685, current: Some((0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216]]
add leaf, self.key: Nibbles("0c03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07"), Key: Nibbles("0d010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b
main loop, hashed address: 0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b, current: Some((0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242]]
add leaf, self.key: Nibbles("0d010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805"), Key: Nibbles("0e050c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9
main loop, hashed address: 0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9, current: Some((0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b, Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }))
main loop, leaf node: 0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242], [160, 222, 84, 43, 92, 36, 116, 192, 80, 3, 23, 8, 215, 23, 136, 212, 140, 205, 224, 221, 28, 238, 85, 132, 144, 111, 186, 83, 19, 171, 180, 158, 6]]
add leaf, self.key: Nibbles("0e050c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b"), Key: Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
main loop, before continue, None, 0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b
main loop, hashed address: 0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b, current: None
main loop, leaf node: 0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242], [160, 222, 84, 43, 92, 36, 116, 192, 80, 3, 23, 8, 215, 23, 136, 212, 140, 205, 224, 221, 28, 238, 85, 132, 144, 111, 186, 83, 19, 171, 180, 158, 6], [160, 19, 238, 147, 134, 120, 56, 173, 160, 107, 70, 236, 96, 193, 18, 56, 26, 152, 31, 192, 117, 247, 39, 180, 55, 190, 153, 25, 202, 147, 84, 194, 193]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0011111111100011), TrieMask(0000001000100000)]
update parent hash, parent_index:0,  hash_masks:TrieMask(0100101001100011)
store branch node, current: Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000001000100000), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0100101001100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
add leaf, self.key: Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09"), Key: Nibbles("0f040c0a080503020806010505080e02090f090805080a030800040204050b0b03000f000300030c0c07010e040109020e04010504060203070b060c0e05080b"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
main loop, enter loop, None, None, []
current stack, 12, [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242], [160, 198, 147, 100, 157, 45, 61, 20, 45, 219, 35, 51, 74, 237, 185, 181, 13, 89, 33, 128, 219, 62, 249, 166, 124, 201, 237, 99, 161, 120, 118, 47, 127]]
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242], [160, 198, 147, 100, 157, 45, 61, 20, 45, 219, 35, 51, 74, 237, 185, 181, 13, 89, 33, 128, 219, 62, 249, 166, 124, 201, 237, 99, 161, 120, 118, 47, 127], [160, 15, 54, 171, 195, 57, 67, 215, 61, 103, 21, 232, 55, 133, 90, 174, 101, 94, 69, 217, 109, 190, 165, 213, 126, 186, 16, 158, 128, 59, 232, 53, 126]]
preceding_len: 0, common_prefix_len: 0, groups: [TrieMask(1111111111100011)]
store branch node, current: Nibbles("0f040c0a080503020806010505080e02090f090805080a030800040204050b0b03000f000300030c0c07010e040109020e04010504060203070b060c0e05080b"), tree_masks: TrieMask(0000000001000000), hash_masks: TrieMask(0100101001100011), groups:TrieMask(1111111111100011), children: [0xd8d26e501d189f99cbc4a5816c27fc2c8f037e32d0a7679fb9faf65803fd1bbb, 0x8459a49bfb06874e081b18c75cdd51b04de99e191f1017064d89a51fabe13933, 0x7c59605f56beb56b1d95b31d0f030443dcc919a01e655835f720e34e7d57b245, 0x1d3ec2473fd8d6111442717de054d292ebd912e87f9a87cdabb92520b152d266, 0xcf13d9f91f2800ecb26ae41904f844c180fb502d8c03a172f5371119f4b6892c, 0x30a46a45ffde76b6a0e317ef15dd8336edeb82a0a52c8bb50fbf90795e735e68, 0xc693649d2d3d142ddb23334aedb9b50d592180db3ef9a67cc9ed63a178762f7f], len: 0, store_in_db_trie: true
store branch node, tree_masks: [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0100101001100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
tree masks, 0, 64, [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
state root: (0x5f2e7e99e9d1b82d6463aed7fa88028a89b21b6f1d802850899586c2c1eba849, TrieUpdates { trie_operations: {StorageTrie(0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9): Delete, StorageTrie(0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0): Delete, StorageTrie(0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae): Delete, StorageTrie(0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a): Delete, StorageTrie(0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6): Delete, StorageTrie(0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2): Delete, AccountNode(StoredNibbles(Nibbles(""))): Update(BranchNodeCompact { state_mask: TrieMask(1111111111100011), tree_mask: TrieMask(0000000001000000), hash_mask: TrieMask(0100101001100011), hashes: [0xd8d26e501d189f99cbc4a5816c27fc2c8f037e32d0a7679fb9faf65803fd1bbb, 0x8459a49bfb06874e081b18c75cdd51b04de99e191f1017064d89a51fabe13933, 0x7c59605f56beb56b1d95b31d0f030443dcc919a01e655835f720e34e7d57b245, 0x1d3ec2473fd8d6111442717de054d292ebd912e87f9a87cdabb92520b152d266, 0xcf13d9f91f2800ecb26ae41904f844c180fb502d8c03a172f5371119f4b6892c, 0x30a46a45ffde76b6a0e317ef15dd8336edeb82a0a52c8bb50fbf90795e735e68, 0xc693649d2d3d142ddb23334aedb9b50d592180db3ef9a67cc9ed63a178762f7f], root_hash: Some(0x5f2e7e99e9d1b82d6463aed7fa88028a89b21b6f1d802850899586c2c1eba849) }), StorageTrie(0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94): Delete, StorageTrie(0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7): Delete, StorageTrie(0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e): Delete, StorageTrie(0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f): Delete, StorageTrie(0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60): Delete, StorageTrie(0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3): Delete, StorageTrie(0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0): Delete, StorageTrie(0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685): Delete, StorageTrie(0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b): Delete, StorageTrie(0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678): Delete, StorageTrie(0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33): Delete, StorageTrie(0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b): Delete, AccountNode(StoredNibbles(Nibbles("06"))): Update(BranchNodeCompact { state_mask: TrieMask(0000000000100001), tree_mask: TrieMask(0000000000000000), hash_mask: TrieMask(0000000000000001), hashes: [0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd], root_hash: None }), StorageTrie(0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7): Delete, StorageTrie(0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108): Delete} })

Process finished with exit code 0
