[0m[1m[33mwarning[0m[0m[1m: unused import: `crate::trie::HashedStorageCursor`[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0mcrates/trie/src/trie.rs:578:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m578[0m[0m [0m[0m[1m[38;5;12m|[0m[0m [0m[0m    use crate::trie::HashedStorageCursor;[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_imports)]` on by default[0m

[1m[33mwarning[0m[1m:[0m `reth-trie` (lib test) generated 1 warning
[1m[32m    Finished[0m test [unoptimized + debuginfo] target(s) in 0.85s
[1m[32m     Running[0m unittests src/lib.rs (target/debug/deps/reth_trie-11557336c5936ff6)

running 1 test
[TRACE libmdbx] Read transactions elapsed=2.100375ms active=[(TransactionPtr { txn: 0x7faa42812c00, timed_out: false, lock: Mutex { data: () } }, 1.198167ms)]
[DEBUG libmdbx] Transaction lock is already acquired, blocking... txn=140369236929536 backtrace=   0: std::backtrace_rs::backtrace::libunwind::trace
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/../../backtrace/src/backtrace/libunwind.rs:104:5
       1: std::backtrace_rs::backtrace::trace_unsynchronized
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5
       2: std::backtrace::Backtrace::create
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/backtrace.rs:331:13
       3: std::backtrace::Backtrace::force_capture
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/backtrace.rs:312:9
       4: reth_libmdbx::transaction::TransactionPtr::lock
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/libmdbx-rs/src/transaction.rs:558:30
       5: reth_libmdbx::transaction::TransactionPtr::txn_execute_fail_on_timeout
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/libmdbx-rs/src/transaction.rs:573:20
       6: reth_libmdbx::transaction::TransactionInner<K>::txn_execute
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/libmdbx-rs/src/transaction.rs:322:9
       7: reth_libmdbx::transaction::Transaction<K>::txn_execute
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/libmdbx-rs/src/transaction.rs:112:9
       8: reth_libmdbx::database::Database::new
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/libmdbx-rs/src/database.rs:33:9
       9: reth_libmdbx::transaction::Transaction<K>::open_db
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/libmdbx-rs/src/transaction.rs:219:9
      10: reth_db::implementation::mdbx::tx::Tx<K>::get_dbi::{{closure}}
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/db/src/implementation/mdbx/tx.rs:91:17
      11: once_cell::imp::OnceCell<T>::initialize::{{closure}}
                 at /Users/wuzhenxing/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.19.0/src/imp_std.rs:72:23
      12: core::ops::function::impls::<impl core::ops::function::FnMut<A> for &mut F>::call_mut
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/ops/function.rs:294:13
      13: once_cell::imp::initialize_or_wait
                 at /Users/wuzhenxing/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.19.0/src/imp_std.rs:196:20
      14: once_cell::imp::OnceCell<T>::initialize
                 at /Users/wuzhenxing/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.19.0/src/imp_std.rs:68:9
      15: once_cell::sync::OnceCell<T>::get_or_try_init
                 at /Users/wuzhenxing/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.19.0/src/lib.rs:1161:13
      16: reth_db::implementation::mdbx::tx::Tx<K>::get_dbi
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/db/src/implementation/mdbx/tx.rs:89:9
      17: reth_db::implementation::mdbx::tx::Tx<K>::new_cursor
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/db/src/implementation/mdbx/tx.rs:103:30
      18: <reth_db::implementation::mdbx::tx::Tx<K> as reth_db::abstraction::transaction::DbTx>::cursor_read
                 at /Users/wuzhenxing/Documents/development/rust/reth/crates/storage/db/src/implementation/mdbx/tx.rs:307:9
      19: reth_trie::trie::tests::db_iter
                 at ./src/trie.rs:663:26
      20: reth_trie::trie::tests::db_iter::{{closure}}
                 at ./src/trie.rs:647:17
      21: core::ops::function::FnOnce::call_once
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/ops/function.rs:250:5
      22: core::ops::function::FnOnce::call_once
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/ops/function.rs:250:5
      23: test::__rust_begin_short_backtrace
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/test/src/lib.rs:621:18
      24: test::run_test_in_process::{{closure}}
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/test/src/lib.rs:644:60
      25: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/panic/unwind_safe.rs:272:9
      26: std::panicking::try::do_call
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panicking.rs:554:40
      27: std::panicking::try
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panicking.rs:518:19
      28: std::panic::catch_unwind
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panic.rs:142:14
      29: test::run_test_in_process
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/test/src/lib.rs:644:27
      30: test::run_test::{{closure}}
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/test/src/lib.rs:567:43
      31: test::run_test::{{closure}}
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/test/src/lib.rs:595:41
      32: std::sys_common::backtrace::__rust_begin_short_backtrace
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/sys_common/backtrace.rs:155:18
      33: std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/thread/mod.rs:529:17
      34: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/panic/unwind_safe.rs:272:9
      35: std::panicking::try::do_call
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panicking.rs:554:40
      36: std::panicking::try
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panicking.rs:518:19
      37: std::panic::catch_unwind
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panic.rs:142:14
      38: std::thread::Builder::spawn_unchecked_::{{closure}}
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/thread/mod.rs:528:30
      39: core::ops::function::FnOnce::call_once{{vtable.shim}}
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/ops/function.rs:250:5
      40: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/alloc/src/boxed.rs:2015:9
      41: <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/alloc/src/boxed.rs:2015:9
      42: std::sys::pal::unix::thread::Thread::new::thread_start
                 at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/sys/pal/unix/thread.rs:108:17
      43: __pthread_start
    
account trie
Key: StoredNibbles(Nibbles("06")), Value: StoredBranchNode(BranchNodeCompact { state_mask: TrieMask(0000000000100001), tree_mask: TrieMask(0000000000000000), hash_mask: TrieMask(0000000000000001), hashes: [0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd], root_hash: None })
hashed accounts
Key: 0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a, Value: Account { nonce: 0, balance: 0x000000000000000000000000000000000000000000000000000031d66444e8c0_U256, bytecode_hash: None }
Key: 0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x6079234475ac4992943f96a73c5e885e89ecaf8a07e9d34aa76ac8301352a2fd, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x60d3ba28cbf820d0bf748767d9fdcaef4380841dcbbca1048f9d2a149800d42e, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678, Value: Account { nonce: 0, balance: 0x0000000000000000000000000000000000000000000000001bc16d674ec80000_U256, bytecode_hash: None }
Key: 0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108, Value: Account { nonce: 2, balance: 0x00000000000000000000000000000000000000000000d3c2000d1bb28f9e49d0_U256, bytecode_hash: None }
Key: 0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
Key: 0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b, Value: Account { nonce: 0, balance: 0x00000000000000000000000000000000000000000000d3c21bcecceda1000000_U256, bytecode_hash: None }
[TRACE trie::state_root] calculating state root
walker key: Nibbles("")
seek key: 0x0000000000000000000000000000000000000000000000000000000000000000
walker key: Nibbles("0600")
hashed address: 0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0
main loop, leaf node: 0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0
[TRACE trie::storage_root] calculating storage root hashed_address=0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0
add leaf, self.key: Nibbles(""), Key: Nibbles("00000301040e0506050e000507040c0b0401020506030d0f0603040600080d07060f050c05090d090f0801070e08050906060100000e0c010d04080000050c00"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("") value=Bytes("")
[TRACE trie::hash_builder] new key/value key=Nibbles("00000301040e0506050e000507040c0b0401020506030d0f0603040600080d07060f050c05090d090f0801070e08050906060100000e0c010d04080000050c00") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
walker key: Nibbles("0600")
hashed address: 0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6
main loop, leaf node: 0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6
[TRACE trie::storage_root] calculating storage root hashed_address=0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("00000301040e0506050e000507040c0b0401020506030d0f0603040600080d07060f050c05090d090f0801070e08050906060100000e0c010d04080000050c00") succeeding=Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("00000301040e0506050e000507040c0b0401020506030d0f0603040600080d07060f050c05090d090f0801070e08050906060100000e0c010d04080000050c00") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=1 preceding_len=0 preceding_exists=false
[TRACE trie::hash_builder] scaling state masks to fit new_len=2 old_len=0
[TRACE trie::hash_builder] extra_digit=0 groups=[TrieMask(0000000000000000), TrieMask(0000000000000001)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=64 old_tree_mask_len=0 old_hash_mask_len=0
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0301040e0506050e000507040c0b0401020506030d0f0603040600080d07060f050c05090d090f0801070e08050906060100000e0c010d04080000050c00")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "20314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a064469e8fb52e4fd81a2db0c69872e4108d40b489137acadc690cd0f17113dde3"
stack [[160, 100, 70, 158, 143, 181, 46, 79, 216, 26, 45, 176, 198, 152, 114, 228, 16, 141, 64, 180, 137, 19, 122, 202, 220, 105, 12, 208, 241, 113, 19, 221, 227]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("00000301040e0506050e000507040c0b0401020506030d0f0603040600080d07060f050c05090d090f0801070e08050906060100000e0c010d04080000050c00"), Key: Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("00000301040e0506050e000507040c0b0401020506030d0f0603040600080d07060f050c05090d090f0801070e08050906060100000e0c010d04080000050c00") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
walker key: Nibbles("0600")
hashed address: 0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3
main loop, leaf node: 0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3
[TRACE trie::storage_root] calculating storage root hashed_address=0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06") succeeding=Nibbles("010c00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=0 preceding_len=1 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=10 groups=[TrieMask(0000000000000000), TrieMask(0000010000000001)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "20d2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a029c95f03d07622a71801c44991aa027231963b6b29f6aaac6a5b592450971eaa"
stack [[160, 100, 70, 158, 143, 181, 46, 79, 216, 26, 45, 176, 198, 152, 114, 228, 16, 141, 64, 180, 137, 19, 122, 202, 220, 105, 12, 208, 241, 113, 19, 221, 227], [160, 41, 201, 95, 3, 208, 118, 34, 167, 24, 1, 196, 73, 145, 170, 2, 114, 49, 150, 59, 107, 41, 246, 170, 172, 106, 91, 89, 36, 80, 151, 30, 170]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000000000000), TrieMask(0000010000000001)]
[TRACE trie::hash_builder] resizing stack to prepare branch node new_len=0 old_len=2
[TRACE trie::hash_builder] pushing branch node with TrieMask(0000010000000001) mask from stack
[TRACE trie::hash_builder] branch node rlp rlp="a0d8d26e501d189f99cbc4a5816c27fc2c8f037e32d0a7679fb9faf65803fd1bbb"
[TRACE trie::hash_builder] stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187]] 
update parent hash, parent_index:0,  hash_masks:TrieMask(0000000000000001)
store branch node, current: Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000010000000001), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000000000000001), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=1 old_tree_mask_len=64 old_hash_mask_len=64
[TRACE trie::hash_builder] truncated nibbles to 1 bytes current=Nibbles("00")
[TRACE trie::hash_builder] popping empty state masks groups=[TrieMask(0000000000000000)]
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
[TRACE trie::hash_builder] loop; i=1 current=Nibbles("00") build_extensions=true
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=false
[TRACE trie::hash_builder] scaling state masks to fit new_len=1 old_len=0
[TRACE trie::hash_builder] extra_digit=0 groups=[TrieMask(0000000000000001)]
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("")
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06"), Key: Nibbles("010c00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("000a0d020603080c08090e0f09080d0e070e0405000e0a03020c090d03070a030d0b050d040d030603040d080d060406040d0c0b02000506040a0d000c0c0d06") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("010c00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
walker key: Nibbles("0600")
hashed address: 0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae
main loop, leaf node: 0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae
[TRACE trie::storage_root] calculating storage root hashed_address=0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("010c00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03") succeeding=Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("010c00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=1 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] scaling state masks to fit new_len=2 old_len=1
[TRACE trie::hash_builder] extra_digit=12 groups=[TrieMask(0000000000000001), TrieMask(0001000000000000)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=64 old_tree_mask_len=1 old_hash_mask_len=1
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "2006ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a0873d35a47f4472abaad46add949c43828dd6bda92cd2a3deedffc953fc349337"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 135, 61, 53, 164, 127, 68, 114, 171, 170, 212, 106, 221, 148, 156, 67, 130, 141, 214, 189, 169, 44, 210, 163, 222, 237, 255, 201, 83, 252, 52, 147, 55]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("010c00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03"), Key: Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("010c00060c0e0f0f02060c010e0100040903090f0a0b0c010d0901070706000e04050505010208010e04060e0d0809070506010f02090a03010e0f0807050f03") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
walker key: Nibbles("0600")
hashed address: 0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60
main loop, leaf node: 0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60
[TRACE trie::storage_root] calculating storage root hashed_address=0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e") succeeding=Nibbles("05010409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=0 preceding_len=1 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=14 groups=[TrieMask(0000000000000001), TrieMask(0101000000000000)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "20baa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a08aa44d33780722357c6a3e21b26010b083b0648465f4bf25a6b1eeb9e7eb124e"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 135, 61, 53, 164, 127, 68, 114, 171, 170, 212, 106, 221, 148, 156, 67, 130, 141, 214, 189, 169, 44, 210, 163, 222, 237, 255, 201, 83, 252, 52, 147, 55], [160, 138, 164, 77, 51, 120, 7, 34, 53, 124, 106, 62, 33, 178, 96, 16, 176, 131, 176, 100, 132, 101, 244, 191, 37, 166, 177, 238, 185, 231, 235, 18, 78]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000000000001), TrieMask(0101000000000000)]
[TRACE trie::hash_builder] resizing stack to prepare branch node new_len=1 old_len=3
[TRACE trie::hash_builder] pushing branch node with TrieMask(0101000000000000) mask from stack
[TRACE trie::hash_builder] branch node rlp rlp="a08459a49bfb06874e081b18c75cdd51b04de99e191f1017064d89a51fabe13933"
[TRACE trie::hash_builder] stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51]] 
update parent hash, parent_index:0,  hash_masks:TrieMask(0000000000000011)
store branch node, current: Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0101000000000000), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000000000000011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=1 old_tree_mask_len=64 old_hash_mask_len=64
[TRACE trie::hash_builder] truncated nibbles to 1 bytes current=Nibbles("01")
[TRACE trie::hash_builder] popping empty state masks groups=[TrieMask(0000000000000001)]
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
[TRACE trie::hash_builder] loop; i=1 current=Nibbles("01") build_extensions=true
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=1 groups=[TrieMask(0000000000000011)]
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("")
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e"), Key: Nibbles("05010409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("010e0b0a0a0903000b080e090103000402030c0108030b0f03080b000506040b000100030108000b070d0a0d0300010001030b01080e05090808000504010a0e") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("05010409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
walker key: Nibbles("0600")
hashed address: 0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a
main loop, leaf node: 0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a
[TRACE trie::storage_root] calculating storage root hashed_address=0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("05010409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600") succeeding=Nibbles("050308000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("05010409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=1 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] scaling state masks to fit new_len=2 old_len=1
[TRACE trie::hash_builder] extra_digit=1 groups=[TrieMask(0000000000000011), TrieMask(0000000000000010)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=64 old_tree_mask_len=1 old_hash_mask_len=1
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "20494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a021bd4f20d5a0a45944ead4c8afbe3e3de72e195ad271f13fa5352608a19bc716"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 33, 189, 79, 32, 213, 160, 164, 89, 68, 234, 212, 200, 175, 190, 62, 61, 231, 46, 25, 90, 210, 113, 241, 63, 165, 53, 38, 8, 161, 155, 199, 22]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("05010409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600"), Key: Nibbles("050308000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a"), Value: [248, 74, 128, 134, 49, 214, 100, 68, 232, 192, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("05010409040c0707010c0307070601000504000e080b090b08060108060201060a06040d0c0f07030a070a0b05070e0c020c050905030208060f0005090f0600") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("050308000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a") value=Bytes("f84a808631d66444e8c0a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
walker key: Nibbles("0600")
hashed address: 0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e
main loop, leaf node: 0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e
[TRACE trie::storage_root] calculating storage root hashed_address=0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("050308000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a") succeeding=Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("050308000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=1 preceding_len=1 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=3 groups=[TrieMask(0000000000000011), TrieMask(0000000000001010)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("08000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "2080c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a", value: "f84a808631d66444e8c0a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a0d9d6af49bc82ebe8b604cdfed4bbb8c89dfaa4ada600a33cf63dd8debad6ee2c"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 33, 189, 79, 32, 213, 160, 164, 89, 68, 234, 212, 200, 175, 190, 62, 61, 231, 46, 25, 90, 210, 113, 241, 63, 165, 53, 38, 8, 161, 155, 199, 22], [160, 217, 214, 175, 73, 188, 130, 235, 232, 182, 4, 205, 254, 212, 187, 184, 200, 157, 250, 164, 173, 166, 0, 163, 60, 246, 61, 216, 222, 186, 214, 238, 44]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("050308000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a"), Key: Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("050308000c070b070a0e08010a05080e0b09080d090c07080d0e040a010f0d070f0d090503050f0c0905030e0d020b0e0600020d0a0a0a04010706070301020a") value=Bytes("f84a808631d66444e8c0a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
walker key: Nibbles("0600")
walker key: Nibbles("0600")
main loop, branch node: Nibbles("0600"), false, 0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd
add branch, self.key: Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e"), Key: Nibbles("0600"), Value: 0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e") succeeding=Nibbles("0600")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=0 preceding_len=1 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=10 groups=[TrieMask(0000000000000011), TrieMask(0000010000001010)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "205a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a0a2a28206e77d280fae695875629824f75acc4ccba7fea09cf00e6435da9a7de0"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 33, 189, 79, 32, 213, 160, 164, 89, 68, 234, 212, 200, 175, 190, 62, 61, 231, 46, 25, 90, 210, 113, 241, 63, 165, 53, 38, 8, 161, 155, 199, 22], [160, 217, 214, 175, 73, 188, 130, 235, 232, 182, 4, 205, 254, 212, 187, 184, 200, 157, 250, 164, 173, 166, 0, 163, 60, 246, 61, 216, 222, 186, 214, 238, 44], [160, 162, 162, 130, 6, 231, 125, 40, 15, 174, 105, 88, 117, 98, 152, 36, 247, 90, 204, 76, 203, 167, 254, 160, 156, 240, 14, 100, 53, 218, 154, 125, 224]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000000000011), TrieMask(0000010000001010)]
[TRACE trie::hash_builder] resizing stack to prepare branch node new_len=2 old_len=5
[TRACE trie::hash_builder] pushing branch node with TrieMask(0000010000001010) mask from stack
[TRACE trie::hash_builder] branch node rlp rlp="a07c59605f56beb56b1d95b31d0f030443dcc919a01e655835f720e34e7d57b245"
[TRACE trie::hash_builder] stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69]] 
update parent hash, parent_index:0,  hash_masks:TrieMask(0000000000100011)
store branch node, current: Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000010000001010), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000000000100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=1 old_tree_mask_len=64 old_hash_mask_len=64
[TRACE trie::hash_builder] truncated nibbles to 1 bytes current=Nibbles("05")
[TRACE trie::hash_builder] popping empty state masks groups=[TrieMask(0000000000000011)]
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
[TRACE trie::hash_builder] loop; i=1 current=Nibbles("05") build_extensions=true
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=5 groups=[TrieMask(0000000000100011)]
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("")
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
[TRACE trie::hash_builder] old key/value key=Nibbles("050a050a000b0f0e050b02080807060701090f04040f0f0d00000b03080904030006060e0b070f050a000e010b0d0a03000f0d020f0c0902070e0a080505000e") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0600") value=Hash(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd)
walker key: Nibbles("0600")
seek key: 0x6100000000000000000000000000000000000000000000000000000000000000
walker key: Nibbles("0605")
walker key: Nibbles("0605")
seek key: 0x6500000000000000000000000000000000000000000000000000000000000000
hashed address: 0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2
main loop, leaf node: 0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2
[TRACE trie::storage_root] calculating storage root hashed_address=0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0600") succeeding=Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0600") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=1 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] scaling state masks to fit new_len=2 old_len=1
[TRACE trie::hash_builder] extra_digit=0 groups=[TrieMask(0000000000100011), TrieMask(0000000000000001)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=2 old_tree_mask_len=1 old_hash_mask_len=1
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("")
[TRACE trie::hash_builder] pushing branch node hash hash=0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("0600"), Key: Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("0600") value=Hash(0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd)
[TRACE trie::hash_builder] new key/value key=Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7
main loop, leaf node: 0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7
[TRACE trie::storage_root] calculating storage root hashed_address=0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02") succeeding=Nibbles("07050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=0 preceding_len=1 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=5 groups=[TrieMask(0000000000100011), TrieMask(0000000000100001)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=64 old_tree_mask_len=2 old_hash_mask_len=2
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "20ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a06b116580e0f203dcbd9f6bfeba1f6cafbdebe243c340e9f3b81239198a74b311"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 159, 142, 63, 64, 226, 88, 92, 162, 1, 179, 162, 153, 113, 158, 154, 129, 130, 75, 43, 76, 118, 85, 216, 218, 167, 92, 74, 238, 91, 115, 191, 221], [160, 107, 17, 101, 128, 224, 242, 3, 220, 189, 159, 107, 254, 186, 31, 108, 175, 189, 235, 226, 67, 195, 64, 233, 243, 184, 18, 57, 25, 138, 116, 179, 17]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000000100011), TrieMask(0000000000100001)]
[TRACE trie::hash_builder] resizing stack to prepare branch node new_len=3 old_len=5
[TRACE trie::hash_builder] pushing branch node with TrieMask(0000000000100001) mask from stack
[TRACE trie::hash_builder] branch node rlp rlp="a01d3ec2473fd8d6111442717de054d292ebd912e87f9a87cdabb92520b152d266"
[TRACE trie::hash_builder] stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102]] 
update parent hash, parent_index:0,  hash_masks:TrieMask(0000000001100011)
store branch node, current: Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000001), groups:TrieMask(0000000000100001), children: [0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd], len: 1, store_in_db_trie: true
store branch node, tree_masks: [TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000000001100011), TrieMask(0000000000000001), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
tree masks, self.tree_masks=[TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], current=Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02"), len=1
tree masks, 1, 64, [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
[TRACE trie::hash_builder] intermediate node node=BranchNodeCompact { state_mask: TrieMask(0000000000100001), tree_mask: TrieMask(0000000000000000), hash_mask: TrieMask(0000000000000001), hashes: [0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd], root_hash: None }
[TRACE trie::hash_builder] resizing tree/hash masks new_len=1 old_tree_mask_len=64 old_hash_mask_len=64
[TRACE trie::hash_builder] truncated nibbles to 1 bytes current=Nibbles("06")
[TRACE trie::hash_builder] popping empty state masks groups=[TrieMask(0000000000100011)]
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
[TRACE trie::hash_builder] loop; i=1 current=Nibbles("06") build_extensions=true
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=6 groups=[TrieMask(0000000001100011)]
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("")
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02"), Key: Nibbles("07050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("06050f0f0e06070d000d0808060f030f080b0c0b01000f0f0d0c00060c03040300000f0f08040a0a010a040a040f080d04050c040e020b030a0d0307010b0c02") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("07050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94
main loop, leaf node: 0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94
[TRACE trie::storage_root] calculating storage root hashed_address=0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("07050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07") succeeding=Nibbles("080a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("07050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=7 groups=[TrieMask(0000000011100011)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=64 old_tree_mask_len=1 old_hash_mask_len=1
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "35a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a0f3e48cc0e9f94b8b9f48ec3c8b967363352b4b124febd3a0f91759aab3bd34cd"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("07050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07"), Key: Nibbles("080a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("07050a030e0b0d000205090a0b000607000f05090e01000800050a050b0e080c07020d000c030e06060c0100040e0f01040c060306040b0f030d0b07020b0e07") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("080a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0
main loop, leaf node: 0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0
[TRACE trie::storage_root] calculating storage root hashed_address=0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("080a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904") succeeding=Nibbles("09030203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("080a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=8 groups=[TrieMask(0000000111100011)]
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "3a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a08b55b7742ed825a92f0106087753bea6dd93cf29a49c0810275dd5bbaff27a30"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("080a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904"), Key: Nibbles("09030203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("080a030505020d06000a09080e000a0d0e0706050a0d0d0d0a0d000a020e0402000c0a090b010e0e0f050f0302060b0a070a0b0806000b0b040e0a07020c0904") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("09030203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f
main loop, leaf node: 0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f
[TRACE trie::storage_root] calculating storage root hashed_address=0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("09030203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00") succeeding=Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("09030203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=1 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] scaling state masks to fit new_len=2 old_len=1
[TRACE trie::hash_builder] extra_digit=3 groups=[TrieMask(0000000111100011), TrieMask(0000000000001000)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "20230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a0040f5a9a462243c2449fe66b32edd0e82e8605fe7f4ef5c86f3760d1a92c1903"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 4, 15, 90, 154, 70, 34, 67, 194, 68, 159, 230, 107, 50, 237, 208, 232, 46, 134, 5, 254, 127, 78, 245, 200, 111, 55, 96, 209, 169, 44, 25, 3]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("09030203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00"), Key: Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("09030203000d000b020307070400040a03060401020e02060d0203010d0e040c070e010a090f0b06020e0202070b0402000200000e0e0905000a050c0a090c00") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678
main loop, leaf node: 0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678
[TRACE trie::storage_root] calculating storage root hashed_address=0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f") succeeding=Nibbles("0a090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=0 preceding_len=1 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=7 groups=[TrieMask(0000000111100011), TrieMask(0000000010001000)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "208cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a036518cc36fdfe9b944ab2abf0c2316a5b4cdcdd0b94b0b1088725a585d138b57"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 4, 15, 90, 154, 70, 34, 67, 194, 68, 159, 230, 107, 50, 237, 208, 232, 46, 134, 5, 254, 127, 78, 245, 200, 111, 55, 96, 209, 169, 44, 25, 3], [160, 54, 81, 140, 195, 111, 223, 233, 185, 68, 171, 42, 191, 12, 35, 22, 165, 180, 205, 205, 208, 185, 75, 11, 16, 136, 114, 90, 88, 93, 19, 139, 87]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000000111100011), TrieMask(0000000010001000)]
[TRACE trie::hash_builder] resizing stack to prepare branch node new_len=6 old_len=8
[TRACE trie::hash_builder] pushing branch node with TrieMask(0000000010001000) mask from stack
[TRACE trie::hash_builder] branch node rlp rlp="a0cf13d9f91f2800ecb26ae41904f844c180fb502d8c03a172f5371119f4b6892c"
[TRACE trie::hash_builder] stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44]] 
update parent hash, parent_index:0,  hash_masks:TrieMask(0000001001100011)
store branch node, current: Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000000010001000), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000001001100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=1 old_tree_mask_len=64 old_hash_mask_len=64
[TRACE trie::hash_builder] truncated nibbles to 1 bytes current=Nibbles("09")
[TRACE trie::hash_builder] popping empty state masks groups=[TrieMask(0000000111100011)]
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
[TRACE trie::hash_builder] loop; i=1 current=Nibbles("09") build_extensions=true
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=9 groups=[TrieMask(0000001111100011)]
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("")
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f"), Key: Nibbles("0a090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708"), Value: [248, 76, 128, 136, 27, 193, 109, 103, 78, 200, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("0907080c0c09010d0901040c080a0b080b020700030501050a020b03010a0603010b0a0f080f09070e0c070f0a0d0a030a01060906060303020f0e090e03050f") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0a090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708") value=Bytes("f84c80881bc16d674ec80000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33
main loop, leaf node: 0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33
[TRACE trie::storage_root] calculating storage root hashed_address=0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0a090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708") succeeding=Nibbles("0b0409070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0a090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=10 groups=[TrieMask(0000011111100011)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=64 old_tree_mask_len=1 old_hash_mask_len=1
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "39ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678", value: "f84c80881bc16d674ec80000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a01f1a96763e265e907033a6ef489b55d194d2bd0dab2397a7f862f466f6b8cc99"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("0a090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708"), Key: Nibbles("0b0409070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("0a090e0d0206010b04080c0f000a0c0d040403000f070503090f050e09010f0801070404050a0f0b0800010f080600000f050e0d0606030404050a0a0a060708") value=Bytes("f84c80881bc16d674ec80000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0b0409070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108
main loop, leaf node: 0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108
[TRACE trie::storage_root] calculating storage root hashed_address=0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0b0409070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303") succeeding=Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0b0409070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=1 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] scaling state masks to fit new_len=2 old_len=1
[TRACE trie::hash_builder] extra_digit=4 groups=[TrieMask(0000011111100011), TrieMask(0000000000010000)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("09070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "2097decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a07f0afcec127866fce719791ce7ea6134659d042187b8d9328d2d7e690f4f2769"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 127, 10, 252, 236, 18, 120, 102, 252, 231, 25, 121, 28, 231, 234, 97, 52, 101, 157, 4, 33, 135, 184, 217, 50, 141, 45, 126, 105, 15, 79, 39, 105]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("0b0409070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303"), Key: Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008"), Value: [248, 78, 2, 138, 211, 194, 0, 13, 27, 178, 143, 158, 73, 208, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("0b0409070d0e0c0b0c0a07070108060c0d09000003070d0b0405030906090c010c0d000704010d050f070707060b040c010405060a080d0e020e0e030b0c0303") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008") value=Bytes("f84e028ad3c2000d1bb28f9e49d0a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7
main loop, leaf node: 0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7
[TRACE trie::storage_root] calculating storage root hashed_address=0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008") succeeding=Nibbles("0c03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=0 preceding_len=1 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=6 groups=[TrieMask(0000011111100011), TrieMask(0000000001010000)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "20711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108", value: "f84e028ad3c2000d1bb28f9e49d0a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a0bf8a6012f5ac5753a134ddf9fff8361adf15de681732ffc8422098dcd593a857"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 127, 10, 252, 236, 18, 120, 102, 252, 231, 25, 121, 28, 231, 234, 97, 52, 101, 157, 4, 33, 135, 184, 217, 50, 141, 45, 126, 105, 15, 79, 39, 105], [160, 191, 138, 96, 18, 245, 172, 87, 83, 161, 52, 221, 249, 255, 248, 54, 26, 223, 21, 222, 104, 23, 50, 255, 200, 66, 32, 152, 220, 213, 147, 168, 87]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0000011111100011), TrieMask(0000000001010000)]
[TRACE trie::hash_builder] resizing stack to prepare branch node new_len=8 old_len=10
[TRACE trie::hash_builder] pushing branch node with TrieMask(0000000001010000) mask from stack
[TRACE trie::hash_builder] branch node rlp rlp="a030a46a45ffde76b6a0e317ef15dd8336edeb82a0a52c8bb50fbf90795e735e68"
[TRACE trie::hash_builder] stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104]] 
update parent hash, parent_index:0,  hash_masks:TrieMask(0000101001100011)
store branch node, current: Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000000001010000), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0000101001100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=1 old_tree_mask_len=64 old_hash_mask_len=64
[TRACE trie::hash_builder] truncated nibbles to 1 bytes current=Nibbles("0b")
[TRACE trie::hash_builder] popping empty state masks groups=[TrieMask(0000011111100011)]
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
[TRACE trie::hash_builder] loop; i=1 current=Nibbles("0b") build_extensions=true
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=11 groups=[TrieMask(0000111111100011)]
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("")
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008"), Key: Nibbles("0c03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("0b060701010c08070f050d07000a0a000e0c090d0c0b0f0f0604080c0a0b040e0d0e070a0e0c070201080e040e020f0e0f0006050f08030205030f0c09010008") value=Bytes("f84e028ad3c2000d1bb28f9e49d0a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0c03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685
main loop, leaf node: 0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685
[TRACE trie::storage_root] calculating storage root hashed_address=0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0c03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07") succeeding=Nibbles("0d010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0c03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=12 groups=[TrieMask(0001111111100011)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=64 old_tree_mask_len=1 old_hash_mask_len=1
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "337228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a033871bd2f3f3e998472d364e14c6626b645cf7be98178f43e27cdc22b541aad8"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("0c03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07"), Key: Nibbles("0d010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("0c03070202080d0e0708040f05040f00010d0b090b020c04040c050006080a04070d0f04050f0d01080b080e0c0b0d04040702080c0e030606040c0600010e07") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0d010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b
main loop, leaf node: 0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b
[TRACE trie::storage_root] calculating storage root hashed_address=0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0d010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805") succeeding=Nibbles("0e050c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0d010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=13 groups=[TrieMask(0011111111100011)]
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "31c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a079454353a62d61ab6ffb9f3ed0ec22b5ce82eb30f3d39aecca994aadeecd2ff2"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("0d010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805"), Key: Nibbles("0e050c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("0d010c090101060e07080e0f0504070b0b0f060d0300080c02040c01050a01090c05020a00030b0d0d00090305050b0d010105060d090e08060a0e010e060805") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0e050c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9
main loop, leaf node: 0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9
[TRACE trie::storage_root] calculating storage root hashed_address=0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0e050c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b") succeeding=Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0e050c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=1 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] scaling state masks to fit new_len=2 old_len=1
[TRACE trie::hash_builder] extra_digit=5 groups=[TrieMask(0011111111100011), TrieMask(0000000000100000)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "20c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a0de542b5c2474c050031708d71788d48ccde0dd1cee5584906fba5313abb49e06"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242], [160, 222, 84, 43, 92, 36, 116, 192, 80, 3, 23, 8, 215, 23, 136, 212, 140, 205, 224, 221, 28, 238, 85, 132, 144, 111, 186, 83, 19, 171, 180, 158, 6]]
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("0e050c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b"), Key: Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("0e050c0905010f07040b0c08090e0f0a0106060501040a0c09090d0807020f060b070a030c01010a0f0f06030f05010204060c030704020d0f0a0902050c090b") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
hashed address: 0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b
main loop, leaf node: 0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b
[TRACE trie::storage_root] calculating storage root hashed_address=0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09") succeeding=Nibbles("0f040c0a080503020806010505080e02090f090805080a030800040204050b0b03000f000300030c0c07010e040109020e04010504060203070b060c0e05080b")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=1 common_prefix_len=0 preceding_len=1 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=9 groups=[TrieMask(0011111111100011), TrieMask(0000001000100000)]
[TRACE trie::hash_builder] skipping 2 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("0700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "20707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a013ee93867838ada06b46ec60c112381a981fc075f727b437be9919ca9354c2c1"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242], [160, 222, 84, 43, 92, 36, 116, 192, 80, 3, 23, 8, 215, 23, 136, 212, 140, 205, 224, 221, 28, 238, 85, 132, 144, 111, 186, 83, 19, 171, 180, 158, 6], [160, 19, 238, 147, 134, 120, 56, 173, 160, 107, 70, 236, 96, 193, 18, 56, 26, 152, 31, 192, 117, 247, 39, 180, 55, 190, 153, 25, 202, 147, 84, 194, 193]]
preceding_len: 1, common_prefix_len: 0, groups: [TrieMask(0011111111100011), TrieMask(0000001000100000)]
[TRACE trie::hash_builder] resizing stack to prepare branch node new_len=11 old_len=13
[TRACE trie::hash_builder] pushing branch node with TrieMask(0000001000100000) mask from stack
[TRACE trie::hash_builder] branch node rlp rlp="a0c693649d2d3d142ddb23334aedb9b50d592180db3ef9a67cc9ed63a178762f7f"
[TRACE trie::hash_builder] stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242], [160, 198, 147, 100, 157, 45, 61, 20, 45, 219, 35, 51, 74, 237, 185, 181, 13, 89, 33, 128, 219, 62, 249, 166, 124, 201, 237, 99, 161, 120, 118, 47, 127]] 
update parent hash, parent_index:0,  hash_masks:TrieMask(0100101001100011)
store branch node, current: Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09"), tree_masks: TrieMask(0000000000000000), hash_masks: TrieMask(0000000000000000), groups:TrieMask(0000001000100000), children: [], len: 1, store_in_db_trie: false
store branch node, tree_masks: [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0100101001100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=1 old_tree_mask_len=64 old_hash_mask_len=64
[TRACE trie::hash_builder] truncated nibbles to 1 bytes current=Nibbles("0e")
[TRACE trie::hash_builder] popping empty state masks groups=[TrieMask(0011111111100011)]
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
[TRACE trie::hash_builder] loop; i=1 current=Nibbles("0e") build_extensions=true
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=14 groups=[TrieMask(0111111111100011)]
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("")
[TRACE trie::hash_builder] no common prefix to create branch nodes from, returning
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
add leaf, self.key: Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09"), Key: Nibbles("0f040c0a080503020806010505080e02090f090805080a030800040204050b0b03000f000300030c0c07010e040109020e04010504060203070b060c0e05080b"), Value: [248, 78, 128, 138, 211, 194, 27, 206, 204, 237, 161, 0, 0, 0, 160, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146, 192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180, 33, 160, 197, 210, 70, 1, 134, 247, 35, 60, 146, 126, 125, 178, 220, 199, 3, 192, 229, 0, 182, 83, 202, 130, 39, 59, 123, 250, 216, 4, 93, 133, 164, 112]
[TRACE trie::hash_builder] old key/value key=Nibbles("0e090700070d000e060107010f0702080f070407030c02040c0c000403020a090b00070e0a0a0f010e0f0e0d060a0103070a040a080c01020c07090505020d09") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
[TRACE trie::hash_builder] new key/value key=Nibbles("0f040c0a080503020806010505080e02090f090805080a030800040204050b0b03000f000300030c0c07010e040109020e04010504060203070b060c0e05080b") value=Bytes("f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
current stack, 12, [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242], [160, 198, 147, 100, 157, 45, 61, 20, 45, 219, 35, 51, 74, 237, 185, 181, 13, 89, 33, 128, 219, 62, 249, 166, 124, 201, 237, 99, 161, 120, 118, 47, 127]]
[TRACE trie::hash_builder] updating merkle tree current=Nibbles("0f040c0a080503020806010505080e02090f090805080a030800040204050b0b03000f000300030c0c07010e040109020e04010504060203070b060c0e05080b") succeeding=Nibbles("")
[TRACE trie::hash_builder] loop; i=0 current=Nibbles("0f040c0a080503020806010505080e02090f090805080a030800040204050b0b03000f000300030c0c07010e040109020e04010504060203070b060c0e05080b") build_extensions=false
[TRACE tracing::span::active] -> loop;
[TRACE trie::hash_builder] prefix lengths after comparing keys len=0 common_prefix_len=0 preceding_len=0 preceding_exists=true
[TRACE trie::hash_builder] extra_digit=15 groups=[TrieMask(1111111111100011)]
[TRACE trie::hash_builder] resizing tree/hash masks new_len=64 old_tree_mask_len=1 old_hash_mask_len=1
[TRACE trie::hash_builder] skipping 1 nibbles
[TRACE trie::hash_builder] short_node_key=Nibbles("040c0a080503020806010505080e02090f090805080a030800040204050b0b03000f000300030c0c07010e040109020e04010504060203070b060c0e05080b")
[TRACE trie::hash_builder] pushing leaf node leaf_node=LeafNode { key: "34ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b", value: "f84e808ad3c21bcecceda1000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470" }
[TRACE trie::hash_builder] leaf node rlp rlp="a00f36abc33943d73d6715e837855aae655e45d96dbea5d57eba109e803be8357e"
stack [[160, 216, 210, 110, 80, 29, 24, 159, 153, 203, 196, 165, 129, 108, 39, 252, 44, 143, 3, 126, 50, 208, 167, 103, 159, 185, 250, 246, 88, 3, 253, 27, 187], [160, 132, 89, 164, 155, 251, 6, 135, 78, 8, 27, 24, 199, 92, 221, 81, 176, 77, 233, 158, 25, 31, 16, 23, 6, 77, 137, 165, 31, 171, 225, 57, 51], [160, 124, 89, 96, 95, 86, 190, 181, 107, 29, 149, 179, 29, 15, 3, 4, 67, 220, 201, 25, 160, 30, 101, 88, 53, 247, 32, 227, 78, 125, 87, 178, 69], [160, 29, 62, 194, 71, 63, 216, 214, 17, 20, 66, 113, 125, 224, 84, 210, 146, 235, 217, 18, 232, 127, 154, 135, 205, 171, 185, 37, 32, 177, 82, 210, 102], [160, 243, 228, 140, 192, 233, 249, 75, 139, 159, 72, 236, 60, 139, 150, 115, 99, 53, 43, 75, 18, 79, 235, 211, 160, 249, 23, 89, 170, 179, 189, 52, 205], [160, 139, 85, 183, 116, 46, 216, 37, 169, 47, 1, 6, 8, 119, 83, 190, 166, 221, 147, 207, 41, 164, 156, 8, 16, 39, 93, 213, 187, 175, 242, 122, 48], [160, 207, 19, 217, 249, 31, 40, 0, 236, 178, 106, 228, 25, 4, 248, 68, 193, 128, 251, 80, 45, 140, 3, 161, 114, 245, 55, 17, 25, 244, 182, 137, 44], [160, 31, 26, 150, 118, 62, 38, 94, 144, 112, 51, 166, 239, 72, 155, 85, 209, 148, 210, 189, 13, 171, 35, 151, 167, 248, 98, 244, 102, 246, 184, 204, 153], [160, 48, 164, 106, 69, 255, 222, 118, 182, 160, 227, 23, 239, 21, 221, 131, 54, 237, 235, 130, 160, 165, 44, 139, 181, 15, 191, 144, 121, 94, 115, 94, 104], [160, 51, 135, 27, 210, 243, 243, 233, 152, 71, 45, 54, 78, 20, 198, 98, 107, 100, 92, 247, 190, 152, 23, 143, 67, 226, 124, 220, 34, 181, 65, 170, 216], [160, 121, 69, 67, 83, 166, 45, 97, 171, 111, 251, 159, 62, 208, 236, 34, 181, 206, 130, 235, 48, 243, 211, 154, 236, 202, 153, 74, 173, 238, 205, 47, 242], [160, 198, 147, 100, 157, 45, 61, 20, 45, 219, 35, 51, 74, 237, 185, 181, 13, 89, 33, 128, 219, 62, 249, 166, 124, 201, 237, 99, 161, 120, 118, 47, 127], [160, 15, 54, 171, 195, 57, 67, 215, 61, 103, 21, 232, 55, 133, 90, 174, 101, 94, 69, 217, 109, 190, 165, 213, 126, 186, 16, 158, 128, 59, 232, 53, 126]]
preceding_len: 0, common_prefix_len: 0, groups: [TrieMask(1111111111100011)]
[TRACE trie::hash_builder] resizing stack to prepare branch node new_len=0 old_len=13
[TRACE trie::hash_builder] pushing branch node with TrieMask(1111111111100011) mask from stack
[TRACE trie::hash_builder] branch node rlp rlp="a05f2e7e99e9d1b82d6463aed7fa88028a89b21b6f1d802850899586c2c1eba849"
[TRACE trie::hash_builder] stack [[160, 95, 46, 126, 153, 233, 209, 184, 45, 100, 99, 174, 215, 250, 136, 2, 138, 137, 178, 27, 111, 29, 128, 40, 80, 137, 149, 134, 194, 193, 235, 168, 73]] 
store branch node, current: Nibbles("0f040c0a080503020806010505080e02090f090805080a030800040204050b0b03000f000300030c0c07010e040109020e04010504060203070b060c0e05080b"), tree_masks: TrieMask(0000000001000000), hash_masks: TrieMask(0100101001100011), groups:TrieMask(1111111111100011), children: [0xd8d26e501d189f99cbc4a5816c27fc2c8f037e32d0a7679fb9faf65803fd1bbb, 0x8459a49bfb06874e081b18c75cdd51b04de99e191f1017064d89a51fabe13933, 0x7c59605f56beb56b1d95b31d0f030443dcc919a01e655835f720e34e7d57b245, 0x1d3ec2473fd8d6111442717de054d292ebd912e87f9a87cdabb92520b152d266, 0xcf13d9f91f2800ecb26ae41904f844c180fb502d8c03a172f5371119f4b6892c, 0x30a46a45ffde76b6a0e317ef15dd8336edeb82a0a52c8bb50fbf90795e735e68, 0xc693649d2d3d142ddb23334aedb9b50d592180db3ef9a67cc9ed63a178762f7f], len: 0, store_in_db_trie: true
store branch node, tree_masks: [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)], hash_masks: [TrieMask(0100101001100011), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
tree masks, 0, 64, [TrieMask(0000000001000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000), TrieMask(0000000000000000)]
[TRACE trie::hash_builder] intermediate node node=BranchNodeCompact { state_mask: TrieMask(1111111111100011), tree_mask: TrieMask(0000000001000000), hash_mask: TrieMask(0100101001100011), hashes: [0xd8d26e501d189f99cbc4a5816c27fc2c8f037e32d0a7679fb9faf65803fd1bbb, 0x8459a49bfb06874e081b18c75cdd51b04de99e191f1017064d89a51fabe13933, 0x7c59605f56beb56b1d95b31d0f030443dcc919a01e655835f720e34e7d57b245, 0x1d3ec2473fd8d6111442717de054d292ebd912e87f9a87cdabb92520b152d266, 0xcf13d9f91f2800ecb26ae41904f844c180fb502d8c03a172f5371119f4b6892c, 0x30a46a45ffde76b6a0e317ef15dd8336edeb82a0a52c8bb50fbf90795e735e68, 0xc693649d2d3d142ddb23334aedb9b50d592180db3ef9a67cc9ed63a178762f7f], root_hash: Some(0x5f2e7e99e9d1b82d6463aed7fa88028a89b21b6f1d802850899586c2c1eba849) }
[TRACE trie::hash_builder] resizing tree/hash masks new_len=0 old_tree_mask_len=64 old_hash_mask_len=64
[TRACE trie::hash_builder] 0 or 1 state masks means we have no more elements to process
[TRACE tracing::span::active] <- loop;
[TRACE tracing::span] -- loop;
[TRACE trie::state_root] calculated state root root=0x5f2e7e99e9d1b82d6463aed7fa88028a89b21b6f1d802850899586c2c1eba849 duration=20.485125ms branches_added=1 leaves_added=20
state root: (0x5f2e7e99e9d1b82d6463aed7fa88028a89b21b6f1d802850899586c2c1eba849, TrieUpdates { trie_operations: {StorageTrie(0x51494c771c377610540e8b9b86186216a64dcf73a7ab57ec2c5953286f059f60): Delete, StorageTrie(0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b): Delete, StorageTrie(0xa9ed261b48cf0acd4430f7539f5e91f817445afb801f8600f5ed663445aaa678): Delete, StorageTrie(0x1c06ceff26c1e104939fabc1d917760e45551281e46ed897561f29a31ef875f3): Delete, StorageTrie(0xd1c9116e78ef547bbf6d308c24c15a19c52a03bdd09355bd1156d9e86ae1e685): Delete, StorageTrie(0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a): Delete, StorageTrie(0xe5c951f74bc89efa166514ac99d872f6b7a3c11aff63f51246c3742dfa925c9b): Delete, AccountNode(StoredNibbles(Nibbles(""))): Update(BranchNodeCompact { state_mask: TrieMask(1111111111100011), tree_mask: TrieMask(0000000001000000), hash_mask: TrieMask(0100101001100011), hashes: [0xd8d26e501d189f99cbc4a5816c27fc2c8f037e32d0a7679fb9faf65803fd1bbb, 0x8459a49bfb06874e081b18c75cdd51b04de99e191f1017064d89a51fabe13933, 0x7c59605f56beb56b1d95b31d0f030443dcc919a01e655835f720e34e7d57b245, 0x1d3ec2473fd8d6111442717de054d292ebd912e87f9a87cdabb92520b152d266, 0xcf13d9f91f2800ecb26ae41904f844c180fb502d8c03a172f5371119f4b6892c, 0x30a46a45ffde76b6a0e317ef15dd8336edeb82a0a52c8bb50fbf90795e735e68, 0xc693649d2d3d142ddb23334aedb9b50d592180db3ef9a67cc9ed63a178762f7f], root_hash: Some(0x5f2e7e99e9d1b82d6463aed7fa88028a89b21b6f1d802850899586c2c1eba849) }), StorageTrie(0x1ebaa930b8e9130423c183bf38b0564b0103180b7dad301013b18e59880541ae): Delete, StorageTrie(0x00314e565e0574cb412563df634608d76f5c59d9f817e85966100ec1d48005c0): Delete, StorageTrie(0x65ffe67d0d886f3f8bcb10ffdc06c34300ff84aa1a4a4f8d45c4e2b3ad371bc2): Delete, StorageTrie(0x0ad2638c89ef98de7e450ea32c9d37a3db5d4d3634d8d6464dcb20564ad0ccd6): Delete, StorageTrie(0x8a3552d60a98e0ade765adddad0a2e420ca9b1eef5f326ba7ab860bb4ea72c94): Delete, StorageTrie(0x93230d0b2377404a36412e26d231de4c7e1a9fb62e227b420200ee950a5ca9c0): Delete, StorageTrie(0x978cc91d914c8ab8b2703515a2b31a631baf8f97ec7fada3a16966332fe9e35f): Delete, StorageTrie(0x5a5a0bfe5b28876719f44ffd00b38943066eb7f5a0e1bda30fd2fc927ea8550e): Delete, StorageTrie(0xb497decbca77186cd90037db453969c1cd0741d5f7776b4c1456a8de2ee3bc33): Delete, StorageTrie(0xb6711c87f5d70aa0ec9dcbff648cab4ede7aec7218e4e2fef065f83253fc9108): Delete, StorageTrie(0xc37228de784f54f01db9b2c44c5068a47df45fd18b8ecbd44728ce3664c601e7): Delete, StorageTrie(0xe9707d0e6171f728f7473c24cc0432a9b07eaaf1efed6a137a4a8c12c79552d9): Delete, StorageTrie(0x75a3ebd0259ab0670f59e10805a5be8c72d0c3e66c104ef14c6364bf3db72be7): Delete, AccountNode(StoredNibbles(Nibbles("06"))): Update(BranchNodeCompact { state_mask: TrieMask(0000000000100001), tree_mask: TrieMask(0000000000000000), hash_mask: TrieMask(0000000000000001), hashes: [0x9f8e3f40e2585ca201b3a299719e9a81824b2b4c7655d8daa75c4aee5b73bfdd], root_hash: None })} })
test trie::tests::db_iter ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 38 filtered out; finished in 0.35s

